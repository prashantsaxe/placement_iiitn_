import { z } from 'zod';

export const formFieldOptionSchema = z.object({
    label: z.string().min(1, "Option label is required"),
    value: z.string().min(1, "Option value is required"),
});
export type FormFieldOption = z.infer<typeof formFieldOptionSchema>; // Export this type

export const formFieldSchema = z.object({
    _id: z.string().optional(), // Optional: will be generated by MongoDB or can be provided for updates
    label: z.string().min(1, "Field label is required"),
    fieldType: z.enum(["text", "email", "number", "date", "file", "select"]),
    placeholder: z.string().optional(),
    required: z.boolean().default(false),
    options: z.array(formFieldOptionSchema).optional(),
    autoFillKey: z.string().optional(), // We'll need a more specific enum/type for this later based on studentInterface
});

export const formColorSchemeSchema = z.object({
    primaryColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, "Invalid hex color").default("#007bff"),
    backgroundColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, "Invalid hex color").default("#ffffff"),
    textColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, "Invalid hex color").default("#333333"),
});

export const createFormTemplateSchema = z.object({
    name: z.string().min(1, "Form name is required").max(100, "Form name too long"),
    description: z.string().max(500, "Description too long").optional(),
    fields: z.array(formFieldSchema).min(1, "Form must have at least one field"),
    colorScheme: formColorSchemeSchema.optional(),
    uniqueFeatures: z.string().optional(),
    published: z.boolean().default(false).optional(),
    sharedWith: z.array(z.string().refine(val => /^[0-9a-fA-F]{24}$/.test(val), "Invalid Student ID")).optional(), // Validate as ObjectId string
});

export const fieldResponseSchema = z.object({
    fieldId: z.string().refine(val => /^[0-9a-fA-F]{24}$/.test(val), "Invalid Field ID"), // Validate as ObjectId string
    fieldLabel: z.string().min(1, "Field label is required in response"), // Good for auditing/debugging
    value: z.any(), // Value can be string, number, boolean, date string, file URL, array for multi-select etc.
    // Specific validation per fieldType will happen against the FormTemplate
});

export const submitUserResponseSchema = z.object({
    responses: z.array(fieldResponseSchema).min(1, "At least one response is required"),
});

export type SubmitUserResponseInput = z.infer<typeof submitUserResponseSchema>;
export type FieldResponseInput = z.infer<typeof fieldResponseSchema>;


export const updateFormTemplateSchema = createFormTemplateSchema.partial(); // Makes all fields optional
export type UpdateFormTemplateInput = z.infer<typeof updateFormTemplateSchema>;

export type CreateFormTemplateInput = z.infer<typeof createFormTemplateSchema>;
export type FormFieldInput = z.infer<typeof formFieldSchema>;
